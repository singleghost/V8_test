'use strict';

let spectest = {
  print: console.log.bind(console),
  print_i32: console.log.bind(console),
  print_i32_f32: console.log.bind(console),
  print_f64_f64: console.log.bind(console),
  print_f32: console.log.bind(console),
  print_f64: console.log.bind(console),
  global_i32: 666,
  global_f32: 666,
  global_f64: 666,
  table: new WebAssembly.Table({initial: 10, maximum: 20, element: 'anyfunc'}),
  memory: new WebAssembly.Memory({initial: 1, maximum: 2})
};
let handler = {
  get(target, prop) {
    return (prop in target) ?  target[prop] : {};
  }
};
let registry = new Proxy({spectest}, handler);

function register(name, instance) {
  registry[name] = instance.exports;
}

function module(bytes, valid = true) {
  let buffer = new ArrayBuffer(bytes.length);
  let view = new Uint8Array(buffer);
  for (let i = 0; i < bytes.length; ++i) {
    view[i] = bytes.charCodeAt(i);
  }
  let validated;
  try {
    validated = WebAssembly.validate(buffer);
  } catch (e) {
    throw new Error("Wasm validate throws");
  }
  if (validated !== valid) {
    throw new Error("Wasm validate failure" + (valid ? "" : " expected"));
  }
  return new WebAssembly.Module(buffer);
}

function instance(bytes, imports = registry) {
  return new WebAssembly.Instance(module(bytes), imports);
}

function call(instance, name, args) {
  return instance.exports[name](...args);
}

function get(instance, name) {
  let v = instance.exports[name];
  return (v instanceof WebAssembly.Global) ? v.value : v;
}

function exports(name, instance) {
  return {[name]: instance.exports};
}

function run(action) {
  action();
}

function assert_malformed(bytes) {
  try { module(bytes, false) } catch (e) {
    if (e instanceof WebAssembly.CompileError) return;
  }
  throw new Error("Wasm decoding failure expected");
}

function assert_invalid(bytes) {
  try { module(bytes, false) } catch (e) {
    if (e instanceof WebAssembly.CompileError) return;
  }
  throw new Error("Wasm validation failure expected");
}

function assert_unlinkable(bytes) {
  let mod = module(bytes);
  try { new WebAssembly.Instance(mod, registry) } catch (e) {
    if (e instanceof WebAssembly.LinkError) return;
  }
  throw new Error("Wasm linking failure expected");
}

function assert_uninstantiable(bytes) {
  let mod = module(bytes);
  try { new WebAssembly.Instance(mod, registry) } catch (e) {
    if (e instanceof WebAssembly.RuntimeError) return;
  }
  throw new Error("Wasm trap expected");
}

function assert_trap(action) {
  try { action() } catch (e) {
    if (e instanceof WebAssembly.RuntimeError) return;
  }
  throw new Error("Wasm trap expected");
}

let StackOverflow;
try { (function f() { 1 + f() })() } catch (e) { StackOverflow = e.constructor }

function assert_exhaustion(action) {
  try { action() } catch (e) {
    if (e instanceof StackOverflow) return;
  }
  throw new Error("Wasm resource exhaustion expected");
}

function assert_return(action, expected) {
  let actual = action();
  if (!Object.is(actual, expected)) {
    throw new Error("Wasm return value " + expected + " expected, got " + actual);
  };
}

function assert_return_canonical_nan(action) {
  let actual = action();
  // Note that JS can't reliably distinguish different NaN values,
  // so there's no good way to test that it's a canonical NaN.
  if (!Number.isNaN(actual)) {
    throw new Error("Wasm return value NaN expected, got " + actual);
  };
}

function assert_return_arithmetic_nan(action) {
  // Note that JS can't reliably distinguish different NaN values,
  // so there's no good way to test for specific bitpatterns here.
  let actual = action();
  if (!Number.isNaN(actual)) {
    throw new Error("Wasm return value NaN expected, got " + actual);
  };
}


// select.wast:1
let $1 = instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\xaf\x80\x80\x80\x00\x08\x60\x02\x7f\x7f\x01\x7f\x60\x00\x00\x60\x03\x7f\x7f\x7f\x01\x7f\x60\x03\x7e\x7e\x7f\x01\x7e\x60\x03\x7d\x7d\x7f\x01\x7d\x60\x03\x7c\x7c\x7f\x01\x7c\x60\x01\x7f\x01\x7f\x60\x01\x7f\x00\x03\xa8\x80\x80\x80\x00\x27\x01\x02\x03\x04\x05\x06\x06\x01\x06\x06\x06\x06\x06\x06\x07\x06\x06\x06\x06\x06\x06\x00\x06\x06\x06\x07\x07\x06\x06\x06\x06\x07\x06\x06\x06\x06\x06\x06\x06\x04\x85\x80\x80\x80\x00\x01\x70\x01\x01\x01\x05\x83\x80\x80\x80\x00\x01\x00\x01\x06\x86\x80\x80\x80\x00\x01\x7f\x01\x41\x0a\x0b\x07\xf7\x84\x80\x80\x00\x24\x0a\x73\x65\x6c\x65\x63\x74\x5f\x69\x33\x32\x00\x01\x0a\x73\x65\x6c\x65\x63\x74\x5f\x69\x36\x34\x00\x02\x0a\x73\x65\x6c\x65\x63\x74\x5f\x66\x33\x32\x00\x03\x0a\x73\x65\x6c\x65\x63\x74\x5f\x66\x36\x34\x00\x04\x0d\x73\x65\x6c\x65\x63\x74\x5f\x74\x72\x61\x70\x5f\x6c\x00\x05\x0d\x73\x65\x6c\x65\x63\x74\x5f\x74\x72\x61\x70\x5f\x72\x00\x06\x10\x73\x65\x6c\x65\x63\x74\x5f\x75\x6e\x72\x65\x61\x63\x68\x65\x64\x00\x07\x0f\x61\x73\x2d\x73\x65\x6c\x65\x63\x74\x2d\x66\x69\x72\x73\x74\x00\x08\x0d\x61\x73\x2d\x73\x65\x6c\x65\x63\x74\x2d\x6d\x69\x64\x00\x09\x0e\x61\x73\x2d\x73\x65\x6c\x65\x63\x74\x2d\x6c\x61\x73\x74\x00\x0a\x0d\x61\x73\x2d\x6c\x6f\x6f\x70\x2d\x66\x69\x72\x73\x74\x00\x0b\x0b\x61\x73\x2d\x6c\x6f\x6f\x70\x2d\x6d\x69\x64\x00\x0c\x0c\x61\x73\x2d\x6c\x6f\x6f\x70\x2d\x6c\x61\x73\x74\x00\x0d\x0f\x61\x73\x2d\x69\x66\x2d\x63\x6f\x6e\x64\x69\x74\x69\x6f\x6e\x00\x0e\x0a\x61\x73\x2d\x69\x66\x2d\x74\x68\x65\x6e\x00\x0f\x0a\x61\x73\x2d\x69\x66\x2d\x65\x6c\x73\x65\x00\x10\x0e\x61\x73\x2d\x62\x72\x5f\x69\x66\x2d\x66\x69\x72\x73\x74\x00\x11\x0d\x61\x73\x2d\x62\x72\x5f\x69\x66\x2d\x6c\x61\x73\x74\x00\x12\x11\x61\x73\x2d\x62\x72\x5f\x74\x61\x62\x6c\x65\x2d\x66\x69\x72\x73\x74\x00\x13\x10\x61\x73\x2d\x62\x72\x5f\x74\x61\x62\x6c\x65\x2d\x6c\x61\x73\x74\x00\x14\x16\x61\x73\x2d\x63\x61\x6c\x6c\x5f\x69\x6e\x64\x69\x72\x65\x63\x74\x2d\x66\x69\x72\x73\x74\x00\x16\x14\x61\x73\x2d\x63\x61\x6c\x6c\x5f\x69\x6e\x64\x69\x72\x65\x63\x74\x2d\x6d\x69\x64\x00\x17\x15\x61\x73\x2d\x63\x61\x6c\x6c\x5f\x69\x6e\x64\x69\x72\x65\x63\x74\x2d\x6c\x61\x73\x74\x00\x18\x0e\x61\x73\x2d\x73\x74\x6f\x72\x65\x2d\x66\x69\x72\x73\x74\x00\x19\x0d\x61\x73\x2d\x73\x74\x6f\x72\x65\x2d\x6c\x61\x73\x74\x00\x1a\x14\x61\x73\x2d\x6d\x65\x6d\x6f\x72\x79\x2e\x67\x72\x6f\x77\x2d\x76\x61\x6c\x75\x65\x00\x1b\x0d\x61\x73\x2d\x63\x61\x6c\x6c\x2d\x76\x61\x6c\x75\x65\x00\x1d\x0f\x61\x73\x2d\x72\x65\x74\x75\x72\x6e\x2d\x76\x61\x6c\x75\x65\x00\x1e\x0f\x61\x73\x2d\x64\x72\x6f\x70\x2d\x6f\x70\x65\x72\x61\x6e\x64\x00\x1f\x0b\x61\x73\x2d\x62\x72\x2d\x76\x61\x6c\x75\x65\x00\x20\x12\x61\x73\x2d\x73\x65\x74\x5f\x6c\x6f\x63\x61\x6c\x2d\x76\x61\x6c\x75\x65\x00\x21\x12\x61\x73\x2d\x74\x65\x65\x5f\x6c\x6f\x63\x61\x6c\x2d\x76\x61\x6c\x75\x65\x00\x22\x13\x61\x73\x2d\x73\x65\x74\x5f\x67\x6c\x6f\x62\x61\x6c\x2d\x76\x61\x6c\x75\x65\x00\x23\x0f\x61\x73\x2d\x6c\x6f\x61\x64\x2d\x6f\x70\x65\x72\x61\x6e\x64\x00\x24\x10\x61\x73\x2d\x75\x6e\x61\x72\x79\x2d\x6f\x70\x65\x72\x61\x6e\x64\x00\x25\x11\x61\x73\x2d\x62\x69\x6e\x61\x72\x79\x2d\x6f\x70\x65\x72\x61\x6e\x64\x00\x26\x09\x87\x80\x80\x80\x00\x01\x00\x41\x00\x0b\x01\x15\x0a\xc3\x85\x80\x80\x00\x27\x82\x80\x80\x80\x00\x00\x0b\x89\x80\x80\x80\x00\x00\x20\x00\x20\x01\x20\x02\x1b\x0b\x89\x80\x80\x80\x00\x00\x20\x00\x20\x01\x20\x02\x1b\x0b\x89\x80\x80\x80\x00\x00\x20\x00\x20\x01\x20\x02\x1b\x0b\x89\x80\x80\x80\x00\x00\x20\x00\x20\x01\x20\x02\x1b\x0b\x88\x80\x80\x80\x00\x00\x00\x41\x00\x20\x00\x1b\x0b\x88\x80\x80\x80\x00\x00\x41\x00\x00\x20\x00\x1b\x0b\x98\x80\x80\x80\x00\x00\x00\x1b\x00\x41\x00\x1b\x00\x41\x00\x41\x00\x1b\x00\x43\x00\x00\x00\x00\x41\x00\x1b\x00\x0b\x8e\x80\x80\x80\x00\x00\x41\x00\x41\x01\x20\x00\x1b\x41\x02\x41\x03\x1b\x0b\x8e\x80\x80\x80\x00\x00\x41\x02\x41\x00\x41\x01\x20\x00\x1b\x41\x03\x1b\x0b\x8e\x80\x80\x80\x00\x00\x41\x02\x41\x03\x41\x00\x41\x01\x20\x00\x1b\x1b\x0b\x90\x80\x80\x80\x00\x00\x03\x7f\x41\x02\x41\x03\x20\x00\x1b\x10\x00\x10\x00\x0b\x0b\x90\x80\x80\x80\x00\x00\x03\x7f\x10\x00\x41\x02\x41\x03\x20\x00\x1b\x10\x00\x0b\x0b\x90\x80\x80\x80\x00\x00\x03\x7f\x10\x00\x10\x00\x41\x02\x41\x03\x20\x00\x1b\x0b\x0b\x8e\x80\x80\x80\x00\x00\x41\x02\x41\x03\x20\x00\x1b\x04\x40\x10\x00\x0b\x0b\x91\x80\x80\x80\x00\x00\x41\x01\x04\x7f\x41\x02\x41\x03\x20\x00\x1b\x05\x41\x04\x0b\x0b\x91\x80\x80\x80\x00\x00\x41\x00\x04\x7f\x41\x02\x05\x41\x02\x41\x03\x20\x00\x1b\x0b\x0b\x90\x80\x80\x80\x00\x00\x02\x7f\x41\x02\x41\x03\x20\x00\x1b\x41\x04\x0d\x00\x0b\x0b\x90\x80\x80\x80\x00\x00\x02\x7f\x41\x02\x41\x02\x41\x03\x20\x00\x1b\x0d\x00\x0b\x0b\x92\x80\x80\x80\x00\x00\x02\x7f\x41\x02\x41\x03\x20\x00\x1b\x41\x02\x0e\x01\x00\x00\x0b\x0b\x92\x80\x80\x80\x00\x00\x02\x7f\x41\x02\x41\x02\x41\x03\x20\x00\x1b\x0e\x01\x00\x00\x0b\x0b\x84\x80\x80\x80\x00\x00\x20\x00\x0b\x93\x80\x80\x80\x00\x00\x02\x7f\x41\x02\x41\x03\x20\x00\x1b\x41\x01\x41\x00\x11\x00\x00\x0b\x0b\x93\x80\x80\x80\x00\x00\x02\x7f\x41\x01\x41\x02\x41\x03\x20\x00\x1b\x41\x00\x11\x00\x00\x0b\x0b\x93\x80\x80\x80\x00\x00\x02\x7f\x41\x01\x41\x04\x41\x02\x41\x03\x20\x00\x1b\x11\x00\x00\x0b\x0b\x8e\x80\x80\x80\x00\x00\x41\x00\x41\x04\x20\x00\x1b\x41\x01\x36\x02\x00\x0b\x8e\x80\x80\x80\x00\x00\x41\x08\x41\x01\x41\x02\x20\x00\x1b\x36\x02\x00\x0b\x8b\x80\x80\x80\x00\x00\x41\x01\x41\x02\x20\x00\x1b\x40\x00\x0b\x84\x80\x80\x80\x00\x00\x20\x00\x0b\x8b\x80\x80\x80\x00\x00\x41\x01\x41\x02\x20\x00\x1b\x10\x1c\x0b\x8a\x80\x80\x80\x00\x00\x41\x01\x41\x02\x20\x00\x1b\x0f\x0b\x8a\x80\x80\x80\x00\x00\x41\x01\x41\x02\x20\x00\x1b\x1a\x0b\x8e\x80\x80\x80\x00\x00\x02\x7f\x41\x01\x41\x02\x20\x00\x1b\x0c\x00\x0b\x0b\x8f\x80\x80\x80\x00\x01\x01\x7f\x41\x01\x41\x02\x20\x00\x1b\x21\x00\x20\x00\x0b\x8b\x80\x80\x80\x00\x00\x41\x01\x41\x02\x20\x00\x1b\x22\x00\x0b\x8d\x80\x80\x80\x00\x00\x41\x01\x41\x02\x20\x00\x1b\x24\x00\x23\x00\x0b\x8c\x80\x80\x80\x00\x00\x41\x00\x41\x04\x20\x00\x1b\x28\x02\x00\x0b\x8a\x80\x80\x80\x00\x00\x41\x00\x41\x01\x20\x00\x1b\x45\x0b\x91\x80\x80\x80\x00\x00\x41\x01\x41\x02\x20\x00\x1b\x41\x01\x41\x02\x20\x00\x1b\x6c\x0b");

// select.wast:157
assert_return(() => call($1, "select_i32", [1, 2, 1]), 1);

// select.wast:158
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8b\x80\x80\x80\x00\x02\x60\x00\x00\x60\x03\x7e\x7e\x7f\x01\x7e\x02\x91\x80\x80\x80\x00\x01\x02\x24\x31\x0a\x73\x65\x6c\x65\x63\x74\x5f\x69\x36\x34\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\x9d\x80\x80\x80\x00\x01\x97\x80\x80\x80\x00\x00\x02\x40\x42\x02\x42\x01\x41\x01\x10\x00\x01\x42\x02\x01\x51\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "select_i64", [int64("2"), int64("1"), 1]), int64("2"))

// select.wast:159
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8b\x80\x80\x80\x00\x02\x60\x00\x00\x60\x03\x7d\x7d\x7f\x01\x7d\x02\x91\x80\x80\x80\x00\x01\x02\x24\x31\x0a\x73\x65\x6c\x65\x63\x74\x5f\x66\x33\x32\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa6\x80\x80\x80\x00\x01\xa0\x80\x80\x80\x00\x00\x02\x40\x43\x00\x00\x80\x3f\x43\x00\x00\x00\x40\x41\x01\x10\x00\xbc\x43\x00\x00\x80\x3f\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "select_f32", [1., 2., 1]), 1.)

// select.wast:160
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8b\x80\x80\x80\x00\x02\x60\x00\x00\x60\x03\x7c\x7c\x7f\x01\x7c\x02\x91\x80\x80\x80\x00\x01\x02\x24\x31\x0a\x73\x65\x6c\x65\x63\x74\x5f\x66\x36\x34\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xb2\x80\x80\x80\x00\x01\xac\x80\x80\x80\x00\x00\x02\x40\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x44\x00\x00\x00\x00\x00\x00\x00\x40\x41\x01\x10\x00\xbd\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "select_f64", [1., 2., 1]), 1.)

// select.wast:162
assert_return(() => call($1, "select_i32", [1, 2, 0]), 2);

// select.wast:163
assert_return(() => call($1, "select_i32", [2, 1, 0]), 1);

// select.wast:164
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8b\x80\x80\x80\x00\x02\x60\x00\x00\x60\x03\x7e\x7e\x7f\x01\x7e\x02\x91\x80\x80\x80\x00\x01\x02\x24\x31\x0a\x73\x65\x6c\x65\x63\x74\x5f\x69\x36\x34\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\x9d\x80\x80\x80\x00\x01\x97\x80\x80\x80\x00\x00\x02\x40\x42\x02\x42\x01\x41\x7f\x10\x00\x01\x42\x02\x01\x51\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "select_i64", [int64("2"), int64("1"), -1]), int64("2"))

// select.wast:165
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8b\x80\x80\x80\x00\x02\x60\x00\x00\x60\x03\x7e\x7e\x7f\x01\x7e\x02\x91\x80\x80\x80\x00\x01\x02\x24\x31\x0a\x73\x65\x6c\x65\x63\x74\x5f\x69\x36\x34\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa1\x80\x80\x80\x00\x01\x9b\x80\x80\x80\x00\x00\x02\x40\x42\x02\x42\x01\x41\xf0\xe1\xc3\x87\x7f\x10\x00\x01\x42\x02\x01\x51\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "select_i64", [int64("2"), int64("1"), -252645136]), int64("2"))

// select.wast:167
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8b\x80\x80\x80\x00\x02\x60\x00\x00\x60\x03\x7d\x7d\x7f\x01\x7d\x02\x91\x80\x80\x80\x00\x01\x02\x24\x31\x0a\x73\x65\x6c\x65\x63\x74\x5f\x66\x33\x32\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa6\x80\x80\x80\x00\x01\xa0\x80\x80\x80\x00\x00\x02\x40\x43\x00\x00\xc0\x7f\x43\x00\x00\x80\x3f\x41\x01\x10\x00\xbc\x43\x00\x00\xc0\x7f\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "select_f32", [NaN, 1., 1]), NaN)

// select.wast:168
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8b\x80\x80\x80\x00\x02\x60\x00\x00\x60\x03\x7d\x7d\x7f\x01\x7d\x02\x91\x80\x80\x80\x00\x01\x02\x24\x31\x0a\x73\x65\x6c\x65\x63\x74\x5f\x66\x33\x32\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa6\x80\x80\x80\x00\x01\xa0\x80\x80\x80\x00\x00\x02\x40\x43\x04\x03\x82\x7f\x43\x00\x00\x80\x3f\x41\x01\x10\x00\xbc\x43\x04\x03\x82\x7f\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "select_f32", [NaN, 1., 1]), NaN)

// select.wast:169
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8b\x80\x80\x80\x00\x02\x60\x00\x00\x60\x03\x7d\x7d\x7f\x01\x7d\x02\x91\x80\x80\x80\x00\x01\x02\x24\x31\x0a\x73\x65\x6c\x65\x63\x74\x5f\x66\x33\x32\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa6\x80\x80\x80\x00\x01\xa0\x80\x80\x80\x00\x00\x02\x40\x43\x00\x00\xc0\x7f\x43\x00\x00\x80\x3f\x41\x00\x10\x00\xbc\x43\x00\x00\x80\x3f\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "select_f32", [NaN, 1., 0]), 1.)

// select.wast:170
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8b\x80\x80\x80\x00\x02\x60\x00\x00\x60\x03\x7d\x7d\x7f\x01\x7d\x02\x91\x80\x80\x80\x00\x01\x02\x24\x31\x0a\x73\x65\x6c\x65\x63\x74\x5f\x66\x33\x32\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa6\x80\x80\x80\x00\x01\xa0\x80\x80\x80\x00\x00\x02\x40\x43\x04\x03\x82\x7f\x43\x00\x00\x80\x3f\x41\x00\x10\x00\xbc\x43\x00\x00\x80\x3f\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "select_f32", [NaN, 1., 0]), 1.)

// select.wast:171
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8b\x80\x80\x80\x00\x02\x60\x00\x00\x60\x03\x7d\x7d\x7f\x01\x7d\x02\x91\x80\x80\x80\x00\x01\x02\x24\x31\x0a\x73\x65\x6c\x65\x63\x74\x5f\x66\x33\x32\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa6\x80\x80\x80\x00\x01\xa0\x80\x80\x80\x00\x00\x02\x40\x43\x00\x00\x00\x40\x43\x00\x00\xc0\x7f\x41\x01\x10\x00\xbc\x43\x00\x00\x00\x40\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "select_f32", [2., NaN, 1]), 2.)

// select.wast:172
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8b\x80\x80\x80\x00\x02\x60\x00\x00\x60\x03\x7d\x7d\x7f\x01\x7d\x02\x91\x80\x80\x80\x00\x01\x02\x24\x31\x0a\x73\x65\x6c\x65\x63\x74\x5f\x66\x33\x32\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa6\x80\x80\x80\x00\x01\xa0\x80\x80\x80\x00\x00\x02\x40\x43\x00\x00\x00\x40\x43\x04\x03\x82\x7f\x41\x01\x10\x00\xbc\x43\x00\x00\x00\x40\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "select_f32", [2., NaN, 1]), 2.)

// select.wast:173
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8b\x80\x80\x80\x00\x02\x60\x00\x00\x60\x03\x7d\x7d\x7f\x01\x7d\x02\x91\x80\x80\x80\x00\x01\x02\x24\x31\x0a\x73\x65\x6c\x65\x63\x74\x5f\x66\x33\x32\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa6\x80\x80\x80\x00\x01\xa0\x80\x80\x80\x00\x00\x02\x40\x43\x00\x00\x00\x40\x43\x00\x00\xc0\x7f\x41\x00\x10\x00\xbc\x43\x00\x00\xc0\x7f\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "select_f32", [2., NaN, 0]), NaN)

// select.wast:174
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8b\x80\x80\x80\x00\x02\x60\x00\x00\x60\x03\x7d\x7d\x7f\x01\x7d\x02\x91\x80\x80\x80\x00\x01\x02\x24\x31\x0a\x73\x65\x6c\x65\x63\x74\x5f\x66\x33\x32\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xa6\x80\x80\x80\x00\x01\xa0\x80\x80\x80\x00\x00\x02\x40\x43\x00\x00\x00\x40\x43\x04\x03\x82\x7f\x41\x00\x10\x00\xbc\x43\x04\x03\x82\x7f\xbc\x46\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "select_f32", [2., NaN, 0]), NaN)

// select.wast:176
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8b\x80\x80\x80\x00\x02\x60\x00\x00\x60\x03\x7c\x7c\x7f\x01\x7c\x02\x91\x80\x80\x80\x00\x01\x02\x24\x31\x0a\x73\x65\x6c\x65\x63\x74\x5f\x66\x36\x34\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xb2\x80\x80\x80\x00\x01\xac\x80\x80\x80\x00\x00\x02\x40\x44\x00\x00\x00\x00\x00\x00\xf8\x7f\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x41\x01\x10\x00\xbd\x44\x00\x00\x00\x00\x00\x00\xf8\x7f\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "select_f64", [NaN, 1., 1]), NaN)

// select.wast:177
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8b\x80\x80\x80\x00\x02\x60\x00\x00\x60\x03\x7c\x7c\x7f\x01\x7c\x02\x91\x80\x80\x80\x00\x01\x02\x24\x31\x0a\x73\x65\x6c\x65\x63\x74\x5f\x66\x36\x34\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xb2\x80\x80\x80\x00\x01\xac\x80\x80\x80\x00\x00\x02\x40\x44\x04\x03\x02\x00\x00\x00\xf0\x7f\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x41\x01\x10\x00\xbd\x44\x04\x03\x02\x00\x00\x00\xf0\x7f\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "select_f64", [NaN, 1., 1]), NaN)

// select.wast:178
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8b\x80\x80\x80\x00\x02\x60\x00\x00\x60\x03\x7c\x7c\x7f\x01\x7c\x02\x91\x80\x80\x80\x00\x01\x02\x24\x31\x0a\x73\x65\x6c\x65\x63\x74\x5f\x66\x36\x34\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xb2\x80\x80\x80\x00\x01\xac\x80\x80\x80\x00\x00\x02\x40\x44\x00\x00\x00\x00\x00\x00\xf8\x7f\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x41\x00\x10\x00\xbd\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "select_f64", [NaN, 1., 0]), 1.)

// select.wast:179
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8b\x80\x80\x80\x00\x02\x60\x00\x00\x60\x03\x7c\x7c\x7f\x01\x7c\x02\x91\x80\x80\x80\x00\x01\x02\x24\x31\x0a\x73\x65\x6c\x65\x63\x74\x5f\x66\x36\x34\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xb2\x80\x80\x80\x00\x01\xac\x80\x80\x80\x00\x00\x02\x40\x44\x04\x03\x02\x00\x00\x00\xf0\x7f\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x41\x00\x10\x00\xbd\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "select_f64", [NaN, 1., 0]), 1.)

// select.wast:180
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8b\x80\x80\x80\x00\x02\x60\x00\x00\x60\x03\x7c\x7c\x7f\x01\x7c\x02\x91\x80\x80\x80\x00\x01\x02\x24\x31\x0a\x73\x65\x6c\x65\x63\x74\x5f\x66\x36\x34\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xb2\x80\x80\x80\x00\x01\xac\x80\x80\x80\x00\x00\x02\x40\x44\x00\x00\x00\x00\x00\x00\x00\x40\x44\x00\x00\x00\x00\x00\x00\xf8\x7f\x41\x01\x10\x00\xbd\x44\x00\x00\x00\x00\x00\x00\x00\x40\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "select_f64", [2., NaN, 1]), 2.)

// select.wast:181
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8b\x80\x80\x80\x00\x02\x60\x00\x00\x60\x03\x7c\x7c\x7f\x01\x7c\x02\x91\x80\x80\x80\x00\x01\x02\x24\x31\x0a\x73\x65\x6c\x65\x63\x74\x5f\x66\x36\x34\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xb2\x80\x80\x80\x00\x01\xac\x80\x80\x80\x00\x00\x02\x40\x44\x00\x00\x00\x00\x00\x00\x00\x40\x44\x04\x03\x02\x00\x00\x00\xf0\x7f\x41\x01\x10\x00\xbd\x44\x00\x00\x00\x00\x00\x00\x00\x40\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "select_f64", [2., NaN, 1]), 2.)

// select.wast:182
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8b\x80\x80\x80\x00\x02\x60\x00\x00\x60\x03\x7c\x7c\x7f\x01\x7c\x02\x91\x80\x80\x80\x00\x01\x02\x24\x31\x0a\x73\x65\x6c\x65\x63\x74\x5f\x66\x36\x34\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xb2\x80\x80\x80\x00\x01\xac\x80\x80\x80\x00\x00\x02\x40\x44\x00\x00\x00\x00\x00\x00\x00\x40\x44\x00\x00\x00\x00\x00\x00\xf8\x7f\x41\x00\x10\x00\xbd\x44\x00\x00\x00\x00\x00\x00\xf8\x7f\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "select_f64", [2., NaN, 0]), NaN)

// select.wast:183
run(() => call(instance("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x8b\x80\x80\x80\x00\x02\x60\x00\x00\x60\x03\x7c\x7c\x7f\x01\x7c\x02\x91\x80\x80\x80\x00\x01\x02\x24\x31\x0a\x73\x65\x6c\x65\x63\x74\x5f\x66\x36\x34\x00\x01\x03\x82\x80\x80\x80\x00\x01\x00\x07\x87\x80\x80\x80\x00\x01\x03\x72\x75\x6e\x00\x01\x0a\xb2\x80\x80\x80\x00\x01\xac\x80\x80\x80\x00\x00\x02\x40\x44\x00\x00\x00\x00\x00\x00\x00\x40\x44\x04\x03\x02\x00\x00\x00\xf0\x7f\x41\x00\x10\x00\xbd\x44\x04\x03\x02\x00\x00\x00\xf0\x7f\xbd\x51\x45\x0d\x00\x0f\x0b\x00\x0b", exports("$1", $1)),  "run", []));  // assert_return(() => call($1, "select_f64", [2., NaN, 0]), NaN)

// select.wast:185
assert_trap(() => call($1, "select_trap_l", [1]));

// select.wast:186
assert_trap(() => call($1, "select_trap_l", [0]));

// select.wast:187
assert_trap(() => call($1, "select_trap_r", [1]));

// select.wast:188
assert_trap(() => call($1, "select_trap_r", [0]));

// select.wast:190
assert_return(() => call($1, "as-select-first", [0]), 1);

// select.wast:191
assert_return(() => call($1, "as-select-first", [1]), 0);

// select.wast:192
assert_return(() => call($1, "as-select-mid", [0]), 2);

// select.wast:193
assert_return(() => call($1, "as-select-mid", [1]), 2);

// select.wast:194
assert_return(() => call($1, "as-select-last", [0]), 2);

// select.wast:195
assert_return(() => call($1, "as-select-last", [1]), 3);

// select.wast:197
assert_return(() => call($1, "as-loop-first", [0]), 3);

// select.wast:198
assert_return(() => call($1, "as-loop-first", [1]), 2);

// select.wast:199
assert_return(() => call($1, "as-loop-mid", [0]), 3);

// select.wast:200
assert_return(() => call($1, "as-loop-mid", [1]), 2);

// select.wast:201
assert_return(() => call($1, "as-loop-last", [0]), 3);

// select.wast:202
assert_return(() => call($1, "as-loop-last", [1]), 2);

// select.wast:204
assert_return(() => call($1, "as-if-condition", [0]));

// select.wast:205
assert_return(() => call($1, "as-if-condition", [1]));

// select.wast:206
assert_return(() => call($1, "as-if-then", [0]), 3);

// select.wast:207
assert_return(() => call($1, "as-if-then", [1]), 2);

// select.wast:208
assert_return(() => call($1, "as-if-else", [0]), 3);

// select.wast:209
assert_return(() => call($1, "as-if-else", [1]), 2);

// select.wast:211
assert_return(() => call($1, "as-br_if-first", [0]), 3);

// select.wast:212
assert_return(() => call($1, "as-br_if-first", [1]), 2);

// select.wast:213
assert_return(() => call($1, "as-br_if-last", [0]), 2);

// select.wast:214
assert_return(() => call($1, "as-br_if-last", [1]), 2);

// select.wast:216
assert_return(() => call($1, "as-br_table-first", [0]), 3);

// select.wast:217
assert_return(() => call($1, "as-br_table-first", [1]), 2);

// select.wast:218
assert_return(() => call($1, "as-br_table-last", [0]), 2);

// select.wast:219
assert_return(() => call($1, "as-br_table-last", [1]), 2);

// select.wast:221
assert_return(() => call($1, "as-call_indirect-first", [0]), 3);

// select.wast:222
assert_return(() => call($1, "as-call_indirect-first", [1]), 2);

// select.wast:223
assert_return(() => call($1, "as-call_indirect-mid", [0]), 1);

// select.wast:224
assert_return(() => call($1, "as-call_indirect-mid", [1]), 1);

// select.wast:225
assert_trap(() => call($1, "as-call_indirect-last", [0]));

// select.wast:226
assert_trap(() => call($1, "as-call_indirect-last", [1]));

// select.wast:228
assert_return(() => call($1, "as-store-first", [0]));

// select.wast:229
assert_return(() => call($1, "as-store-first", [1]));

// select.wast:230
assert_return(() => call($1, "as-store-last", [0]));

// select.wast:231
assert_return(() => call($1, "as-store-last", [1]));

// select.wast:233
assert_return(() => call($1, "as-memory.grow-value", [0]), 1);

// select.wast:234
assert_return(() => call($1, "as-memory.grow-value", [1]), 3);

// select.wast:236
assert_return(() => call($1, "as-call-value", [0]), 2);

// select.wast:237
assert_return(() => call($1, "as-call-value", [1]), 1);

// select.wast:238
assert_return(() => call($1, "as-return-value", [0]), 2);

// select.wast:239
assert_return(() => call($1, "as-return-value", [1]), 1);

// select.wast:240
assert_return(() => call($1, "as-drop-operand", [0]));

// select.wast:241
assert_return(() => call($1, "as-drop-operand", [1]));

// select.wast:242
assert_return(() => call($1, "as-br-value", [0]), 2);

// select.wast:243
assert_return(() => call($1, "as-br-value", [1]), 1);

// select.wast:244
assert_return(() => call($1, "as-set_local-value", [0]), 2);

// select.wast:245
assert_return(() => call($1, "as-set_local-value", [1]), 1);

// select.wast:246
assert_return(() => call($1, "as-tee_local-value", [0]), 2);

// select.wast:247
assert_return(() => call($1, "as-tee_local-value", [1]), 1);

// select.wast:248
assert_return(() => call($1, "as-set_global-value", [0]), 2);

// select.wast:249
assert_return(() => call($1, "as-set_global-value", [1]), 1);

// select.wast:250
assert_return(() => call($1, "as-load-operand", [0]), 1);

// select.wast:251
assert_return(() => call($1, "as-load-operand", [1]), 1);

// select.wast:253
assert_return(() => call($1, "as-unary-operand", [0]), 0);

// select.wast:254
assert_return(() => call($1, "as-unary-operand", [1]), 1);

// select.wast:255
assert_return(() => call($1, "as-binary-operand", [0]), 4);

// select.wast:256
assert_return(() => call($1, "as-binary-operand", [1]), 1);

// select.wast:258
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x0a\x8d\x80\x80\x80\x00\x01\x87\x80\x80\x80\x00\x00\x01\x01\x41\x01\x1b\x0b");

// select.wast:265
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x0a\x8f\x80\x80\x80\x00\x01\x89\x80\x80\x80\x00\x00\x41\x01\x42\x01\x41\x01\x1b\x0b");

// select.wast:269
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x0a\x92\x80\x80\x80\x00\x01\x8c\x80\x80\x80\x00\x00\x41\x01\x43\x00\x00\x80\x3f\x41\x01\x1b\x0b");

// select.wast:273
assert_invalid("\x00\x61\x73\x6d\x01\x00\x00\x00\x01\x84\x80\x80\x80\x00\x01\x60\x00\x00\x03\x82\x80\x80\x80\x00\x01\x00\x0a\x96\x80\x80\x80\x00\x01\x90\x80\x80\x80\x00\x00\x41\x01\x44\x00\x00\x00\x00\x00\x00\xf0\x3f\x41\x01\x1b\x0b");
